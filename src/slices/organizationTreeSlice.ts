import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { fetchOrganizations } from '../app/api'
import { type RootState } from '../app/store'

enum AppStatus {
  IDLE,
  LOADING,
  FAILED,
}

const initialState: OrganizationTreeState = {
  status: AppStatus.IDLE,
  organizations: []
}

export const fetchOrganizationsTree = createAsyncThunk(
  'organizationTree/fetchOrganizationsTree',
  async () => {
    const response = await fetchOrganizations()
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)
const preprocessData = (data: Organization[], initData: Organization[] = []): OrganizationRender[] => {
    if (!initData.length) {
        initData = data;
    }
    let removeItemsName: string[] = [];

    let resultData = data.map((item) => {
        if (item.subsidiaries) {
            let populatedSubs = item.subsidiaries.map((sub) => {
                const subItem = initData.find((item) => item.name === sub)

                if (subItem) {
                    removeItemsName.push(subItem.name);
                    return subItem;
                }
                else {
                    throw new Error(`Subsidiary ${sub} not found in initData`);
                }
            });
            return {...item, subsidiaries: preprocessData(populatedSubs as Organization[], initData)};
        }
        return {...item, subsidiaries: []};
    });

    // Remove subsidiaries from 1st level.
    return resultData.filter((item) => !removeItemsName.includes(item.name));
}

export const organizationTreeSlice = createSlice({
  name: 'organizationTree',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchOrganizationsTree.pending, (state) => {
        state.status = AppStatus.LOADING
      })
      .addCase(fetchOrganizationsTree.fulfilled, (state, action) => {
        state.status = AppStatus.IDLE
        state.organizations = preprocessData(action.payload)
      })
      .addCase(fetchOrganizationsTree.rejected, (state) => {
        state.status = AppStatus.FAILED
      })
  }
})

export const selectOrganization = (state: RootState): OrganizationRender[] => state.organizationTree.organizations

export default organizationTreeSlice.reducer
